let x = 10 with fn num -> num + 10 ,
    y = x + 10 in e2(x, y);

let x = 10 in let y = x + 2 in x + y;

let person = {
  name=nil,
  age=nil,
  sex=nil,
  location=nil
};

let kirk = person with {name="Kirk", sex=:male};

-- multiple bindings with extensions
   let task = {name=nil, id=nil, completed=false} in
     let x = 6 with fn -> 10, y = task with {};

let x = 3 in x + 3;

-- mutable variables

let x = ref 0;

x := 7;

-- x is now 8
x := !x + 1;

--[[ sytatic sugar function defitions
let add x, y = x + y is rewritten to
let add = fn x, y -> x + y
]]
let add x,y = x + y in add(2, 3);

--[[
some examples of recursive let expressions
--]]

1 + (let n = 456 in n * n + n * n);

-- this following code evaluates to 42
let f = fn x -> x + 1 in
  let f = fn x -> x * f x in
    f 6;


-- test shadowing
let x = 1 in
  let x = x in x + 4;;